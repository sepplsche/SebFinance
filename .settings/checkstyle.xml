<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
  <property name="severity" value="warning" />

  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: VisibilityModifier off" />
    <property name="onCommentFormat" value="Checkstyle: VisibilityModifier on" />
    <property name="checkFormat" value="VisibilityModifier" />
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: ExecutableStatementCount off" />
    <property name="onCommentFormat" value="Checkstyle: ExecutableStatementCount on" />
    <property name="checkFormat" value="ExecutableStatementCount" />
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: AnonInnerLength off" />
    <property name="onCommentFormat" value="Checkstyle: AnonInnerLength on" />
    <property name="checkFormat" value="AnonInnerLength" />
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: IllegalType off" />
    <property name="onCommentFormat" value="Checkstyle: IllegalType on" />
    <property name="checkFormat" value="IllegalType" />
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: CyclomaticComplexity off" />
    <property name="onCommentFormat" value="Checkstyle: CyclomaticComplexity on" />
    <property name="checkFormat" value="CyclomaticComplexity" />
  </module>

  <module name="FileLength" />
  <module name="FileTabCharacter" />

  <module name="TreeWalker">
    <module name="FileContentsHolder" />
    <module name="ArrayTypeStyle" />
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="System\.out\.println" />
      <property name="message" value="System.out.println is illegal" />
    </module>
    <!-- FHU START: IOUtils-stuff without encoding -->
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.copy(.*,.*![,.*])" />
      <property name="message" value="IOUtils.copy ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.readLines(.*![,.*])" />
      <property name="message" value="IOUtils.readLines ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.toByteArray(.*![,.*])" />
      <property name="message" value="IOUtils.toByteArray ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.toCharArray(.*![,.*])" />
      <property name="message" value="IOUtils.toCharArray ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.toInputStream(.*![,.*])" />
      <property name="message" value="IOUtils.toInputStream ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.toString(.*![,.*])" />
      <property name="message" value="IOUtils.toString ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="IOUtils.write(.*,.*![,.*])" />
      <property name="message" value="IOUtils.write ohne Angabe des Encodings ist nicht erlaubt" />
    </module>
    <!-- FHU END: IOUtils-stuff without encoding -->
    <!-- RFR START: Temporal access without clock -->
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalDate.now\(\)" />
      <property name="message" value="LocalDate.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalDate.now\(ZoneId.*\)" />
      <property name="message" value="LocalDate.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalDateTime.now\(\)" />
      <property name="message" value="LocalDateTime.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalDateTime.now\(ZoneId.*\)" />
      <property name="message" value="LocalDateTime.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalTime.now\(\)" />
      <property name="message" value="LocalTime.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="LocalTime.now\(ZoneId.*\)" />
      <property name="message" value="LocalTime.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="Year.now\(\)" />
      <property name="message" value="Year.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="Year.now\(ZoneId.*\)" />
      <property name="message" value="Year.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="YearMonth.now\(\)" />
      <property name="message" value="YearMonth.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="YearMonth.now\(ZoneId.*\)" />
      <property name="message" value="YearMonth.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="MonthDay.now\(\)" />
      <property name="message" value="MonthDay.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="MonthDay.now\(ZoneId.*\)" />
      <property name="message" value="MonthDay.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="ZonedDateTime.now\(\)" />
      <property name="message" value="ZonedDateTime.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="ZonedDateTime.now\(ZoneId.*\)" />
      <property name="message" value="ZonedDateTime.now ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <module name="Regexp">
      <property name="illegalPattern" value="true" />
      <property name="format" value="Instant.now\(\)" />
      <property name="message" value="Instant.now() ohne Angabe einer Clock ist nicht erlaubt" />
    </module>
    <!-- RFR END: Temporal access without clock -->

    <module name="ModifierOrder" />
    <module name="RedundantModifier">
      <property name="severity" value="ignore" />
      <property name="tokens" value="METHOD_DEF, VARIABLE_DEF" />
    </module>
    <module name="UncommentedMain">
      <property name="excludedClasses" value="GgPrototypeStarter$" />
    </module>
    <module name="UpperEll" />
    <module name="AvoidNestedBlocks">
      <property name="allowInSwitchCase" value="true" />
    </module>
    <module name="EmptyBlock">
      <property name="option" value="text" />
      <property name="tokens"
        value="LITERAL_CATCH, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF,     LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT, LITERAL_DO,     LITERAL_FINALLY" />
    </module>
    <module name="NeedBraces">
      <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE" />
    </module>
    <module name="RightCurly" />
    <module name="CovariantEquals" />
    <module name="DeclarationOrder">
      <property name="severity" value="ignore" />
    </module>
    <module name="EmptyStatement" />
    <module name="EqualsHashCode" />
    <module name="ExplicitInitialization" />
    <module name="HiddenField">
      <property name="severity" value="ignore" />
      <property name="ignoreSetter" value="true" />
      <property name="ignoreConstructorParameter" value="true" />
    </module>

    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean" />
    </module>
    <module name="IllegalType" />
    <module name="InnerAssignment" />
    <module name="MagicNumber">
      <property name="severity" value="ignore" />
      <property name="ignoreNumbers" value="-1, 0, 1, 2, 3" />
      <property name="tokens" value="NUM_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG" />
    </module>
    <module name="MissingSwitchDefault" />
    <module name="DefaultComesLast" />
    <module name="NestedIfDepth">
      <property name="max" value="3" />
    </module>
    <module name="NestedTryDepth">
      <property name="max" value="3" />
    </module>
    <module name="PackageDeclaration" />
    <module name="ParameterAssignment">
      <property name="severity" value="ignore" />
    </module>
    <module name="SimplifyBooleanExpression" />
    <module name="SimplifyBooleanReturn" />
    <module name="StringLiteralEquality" />
    <module name="SuperClone" />
    <module name="SuperFinalize" />
    <module name="FinalClass" />
    <module name="HideUtilityClassConstructor" />
    <module name="InterfaceIsType" />
    <module name="MutableException" />
    <module name="ThrowsCount">
      <property name="max" value="4" />
    </module>
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true" />
    </module>
    <module name="AvoidStarImport" />
    <module name="IllegalImport" />
    <module name="ImportOrder">
      <property name="groups" value="groovy, java, javax, junit, org, au, com, COM, sqlj, net, ch" />
      <property name="ordered" value="false" />
      <property name="separated" value="true" />
    </module>
    <module name="RedundantImport" />
    <module name="UnusedImports" />
    <module name="JavadocStyle">
      <property name="scope" value="public" />
    </module>
    <module name="JavadocType">
      <property name="scope" value="public" />
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF" />
    </module>
    <module name="CyclomaticComplexity">
      <property name="max" value="25" />
    </module>
    <module name="ConstantName">
      <property name="format" value="^(([A-Z](_?[A-Z0-9]+)*)|log)$" />
    </module>
    <module name="LocalFinalVariableName" />
    <module name="LocalVariableName" />
    <module name="MemberName">
      <property name="format" value="^[a-zA-Z0-9]*$|log" />
    </module>
    <module name="MethodName" />
    <module name="PackageName" />
    <module name="ParameterName" />
    <module name="StaticVariableName">
      <property name="format" value="^(([a-zA-Z0-9]*)|log)$" />
    </module>
    <module name="TypeName" />
    <module name="AnonInnerLength">
      <property name="max" value="30" />
    </module>
    <module name="ExecutableStatementCount" />
    <module name="LineLength">
      <property name="max" value="120" />
    </module>
    <module name="MethodLength" />
    <module name="ParameterNumber">
      <property name="max" value="10" />
      <property name="tokens" value="METHOD_DEF" />
    </module>
    <module name="EmptyForIteratorPad" />
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
    </module>
    <module name="NoWhitespaceBefore" />
    <module name="OperatorWrap" />
    <module name="ParenPad">
      <property name="tokens" value="CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL" />
    </module>
    <module name="TypecastParenPad" />
    <module name="WhitespaceAfter" />
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true" />
      <property name="allowEmptyMethods" value="true" />
      <property name="tokens"
        value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LCURLY,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,LITERAL_ASSERT" />
    </module>
    <module name="FallThrough">
      <!-- Einfach ein Kommentar, egal welcher Text -->
      <property name="reliefPattern" value=".*" />
      <message key="fall.through" value="Undocumented fall-through in previous case" />
      <message key="fall.through.last" value="Fall through von letzten Zweig der switch Anweisung." />
    </module>
  </module>
</module>

